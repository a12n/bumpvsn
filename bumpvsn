#!/usr/bin/env ruby

def bump_vsn(vsn, what = :patch)
  a, b, c = vsn
  case what
  when :major
    [a + 1, 0, 0]
  when :minor
    [a, b + 1, 0]
  when :patch
    [a, b, c + 1]
  end
end

#----

class Basic
  attr_reader :file
  def initialize(file)
    @file = file
  end
  def bump(what = :patch)
    old = self.load
    new = bump_vsn old, what
    self.save new
    [old, new]
  end
end

#----

class Plain < Basic
  def initialize(file = 'vsn')
    super(file)
  end
  protected
  def load
    @data = IO.read @file
    m = @data.match /\b(\d+)\.(\d+)\.(\d+)\b/
    m[1..3].map {|x| x.to_i}
  end
  def save(vsn)
    # XXX
    @data.gsub! /\b\d+\.\d+\.\d+\b/, (vsn.join '.')
    IO.write @file, @data
  end
end

#----

class Cmake < Basic
  def initialize
    super('CMakeLists.txt')
  end
  protected
  def load
    @data = IO.read @file
    @vars = []
    vsn = []
    ['major', 'minor', 'patch'].each do |x|
      m = @data.match /\bset\((\w*#{x}\w*)\s+(\d+)\)/i
      @vars.push m[1]
      vsn.push m[2].to_i
    end
    vsn
  end
  def save(vsn)
    @vars.each_with_index do |x, i|
      @data.gsub! /\bset\(#{x}\s+\d+\)/, "set(#{x} #{vsn[i]})"
    end
    IO.write @file, @data
  end
end

#----

if __FILE__ == $0 then
  [Plain, Cmake].each do |c|
    begin
      x = c.new
      old, new = x.bump
      puts "#{x.file} #{old.join '.'} #{new.join '.'}"
    rescue
      nil
    end
  end
end
