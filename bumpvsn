#!/usr/bin/env python3
# Copyright Â© 2013 Anton Yabchinskiy <arn@bestmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import functools
import glob
import os.path
import re
import sys

EX_USAGE = 64
EX_NOINPUT = 66

MAJOR = 0
MINOR = 1
PATCH = 2


def bumpvsn(vsn, what=PATCH):
    if what == MAJOR:
        return (vsn[MAJOR] + 1, 0, 0)
    elif what == MINOR:
        return (vsn[MAJOR], vsn[MINOR] + 1, 0)
    elif what == PATCH:
        return (vsn[MAJOR], vsn[MINOR], vsn[PATCH] + 1)
    raise ValueError


def strvsn(vsn):
    return '.'.join(map(str, vsn))


def plain(filename, what, pattern=None):
    if not pattern:
        pattern = r'\bv?(\d+)\.(\d+)\.(\d+)\b'
    with open(filename) as f:
        mode = os.fstat(f.fileno()).st_mode
        content = f.read()
    match = re.search(pattern, content)
    if not match:
        raise ValueError
    old = tuple(map(int, match.group(1, 2, 3)))
    new = bumpvsn(old, what)
    tmpfilename = filename + '.new'
    with open(tmpfilename, 'w', opener=lambda path, flags: os.open(path, flags, mode=mode)) as f:
        f.write(content[:match.start(1)])
        f.write(str(new[MAJOR]))
        f.write(content[match.end(1):match.start(2)])
        f.write(str(new[MINOR]))
        f.write(content[match.end(2):match.start(3)])
        f.write(str(new[PATCH]))
        f.write(content[match.end(3):])
    os.rename(tmpfilename, filename)
    return filename, old, new


def cmake(what):
    return plain('CMakeLists.txt', what,
                 r'(?is)project\(.+VERSION\s+(\d+)\.(\d+)\.(\d+).*\)')


def rebar(what):
    return plain(glob.glob('src/*.app.src')[0], what)


def envfuncs():
    filename = os.environ.get('BUMPVSN_FILENAME')
    if filename:
        return [
            functools.partial(plain,
                              filename,
                              pattern=os.environ.get('BUMPVSN_PATTERN'))
        ]


def configfuncs(config='.bumpvsn'):
    try:
        funcs = []
        with open(config) as f:
            for line in map(str.strip, f):
                if not line or line.startswith('#'):
                    continue
                try:
                    parts = tuple(
                        filter(bool, map(str.strip, line.split('\t'))))
                    if len(parts) == 1:
                        funcs.append(functools.partial(plain, parts[0]))
                    elif len(parts) == 2:
                        funcs.append(
                            functools.partial(plain,
                                              parts[0],
                                              pattern=parts[1]))
                    else:
                        raise ValueError
                except ValueError:
                    print('Error parsing line "{}"'.format(line),
                          file=sys.stderr)
        return funcs
    except FileNotFoundError:
        return None


if __name__ == '__main__':
    try:
        what = {
            'major': MAJOR,
            'maj': MAJOR,
            'M': MAJOR,
            'minor': MINOR,
            'min': MINOR,
            'm': MINOR,
            'patch': PATCH,
            'pat': PATCH,
            'p': PATCH,
            'micro': PATCH,
            'mic': PATCH,
            'u': PATCH,
        }[sys.argv[1]]
    except IndexError:
        progname = os.path.basename(sys.argv[0])
        if re.search(r'(?i)major', progname):
            what = MAJOR
        elif re.search(r'(?i)minor', progname):
            what = MINOR
        else:
            what = PATCH
    except KeyError:
        print('Usage:', sys.argv[0], 'major|minor|patch')
        sys.exit(EX_USAGE)

    status = EX_NOINPUT
    for func in envfuncs() or configfuncs() or [
            functools.partial(cmake),
            functools.partial(plain, 'dune-project', pattern='\(\s*version\s+(\d+)\.(\d+)\.(\d+)\s*\)'),
            functools.partial(plain, 'vsn'),
            functools.partial(rebar),
    ]:
        try:
            filename, old, new = func(what)
            status = 0
            print(filename, strvsn(old), strvsn(new))
        except:
            pass
    sys.exit(status)
