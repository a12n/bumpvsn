#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Copyright Â© 2013 Anton Yabchinskiy <arn@bestmx.ru>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

def bump_vsn vsn, what = :patch
  a, b, c = vsn
  case what
  when :major
    [a + 1, 0, 0]
  when :minor
    [a, b + 1, 0]
  when :patch
    [a, b, c + 1]
  end
end

#----

class Basic
  attr_reader :file

  def initialize file
    @file = file
  end

  def bump what = :patch
    old = self.load
    new = bump_vsn old, what
    self.save new
    [old, new]
  end
end

#----

class Plain < Basic
  def initialize file = 'vsn'
    super file
  end

  protected
  def load
    @data = IO.read @file
    m = @data.match /\b(\d+)\.(\d+)\.(\d+)\b/
    m[1..3].map {|x| x.to_i}
  end

  def save vsn
    @data.sub! /\b\d+\.\d+\.\d+\b/, (vsn.join '.')
    IO.write @file, @data
  end
end

#----

class Rebar < Plain
  def initialize
    super (Dir.glob 'src/*.app.src')[0]
  end
end

#----

class CMake < Basic
  def initialize
    super 'CMakeLists.txt'
  end

  protected
  def load
    @data = IO.read @file
    @vars = []
    vsn = []
    ['major', 'minor', 'patch'].each do |x|
      m = @data.match /\bset\((\w*#{x}\w*)\s+(\d+)\)/i
      @vars << m[1]
      vsn << m[2].to_i
    end
    vsn
  end

  def save vsn
    @vars.each_with_index do |x, i|
      @data.gsub! /\bset\(#{x}\s+\d+\)/, "set(#{x} #{vsn[i]})"
    end
    IO.write @file, @data
  end
end

#----

if __FILE__ == $0 then
  what =
    case ARGV[0]
    when 'major', 'maj', 'M'
      :major
    when 'minor', 'min', 'm'
      :minor
    when 'patch', 'pat', 'p'
      :patch
    when 'micro', 'mic', 'u'
      :patch
    else
      case
      when ($0.match /major/i)
        :major
      when ($0.match /minor/i)
        :minor
      when ($0.match /patch/i)
        :patch
      else
        fail 'Don\'t know which part to bump'
      end
    end
  ok = false
  [CMake.new, Plain.new, Plain.new('META'), Plain.new('opam'),
   Plain.new('bar-descriptor.xml'), Rebar.new].each do |x|
    begin
      old, new = x.bump what
      ok = true
      puts "#{x.file} #{old.join '.'} #{new.join '.'}"
    rescue
      nil
    end
  end
  exit ok
end
